<li>Rails</li>
<ul>
  <li>Core Guides</li>
  <ul>
    <li>Models</li>
    <ul>
      <li><%= link_to 'ActiveRecord', 'active_record'%></li>
      <li>
        <%= link_to 'Basics',
                    'http://guides.rubyonrails.org/active_record_basics.html',
                    target: '_blank'
        %>
      </li>
      <li>Associations</li>
      <ul>
         <li>
           <%= link_to 'Association Basics',
                       'http://edgeguides.rubyonrails.org/association_basics.html',
                       target: '_blank'%>
         </li>
          <li>belongs_to</li>
          <p>
            See the file <code>associations.rb</code> for lots of good documentation on associations.
          </p>
          <p>
          <pre>
    # Specifies a one-to-one association with another class. This method should only be used
      # if this class contains the foreign key. If the other class contains the foreign key,
      # then you should use +has_one+ instead. See also ActiveRecord::Associations::ClassMethods's overview
      # on when to use +has_one+ and when to use +belongs_to+.
      #
      # Methods will be added for retrieval and query for a single associated object, for which
      # this object holds an id:
      #
      # [association(force_reload = false)]
      #   Returns the associated object. +nil+ is returned if none is found.
      # [association=(associate)]
      #   Assigns the associate object, extracts the primary key, and sets it as the foreign key.
      # [build_association(attributes = {})]
      #   Returns a new object of the associated type that has been instantiated
      #   with +attributes+ and linked to this object through a foreign key, but has not yet been saved.
      # [create_association(attributes = {})]
      #   Returns a new object of the associated type that has been instantiated
      #   with +attributes+, linked to this object through a foreign key, and that
      #   has already been saved (if it passed the validation).
      # [create_association!(attributes = {})]
      #   Does the same as <tt>create_association</tt>, but raises <tt>ActiveRecord::RecordInvalid</tt>
      #   if the record is invalid.
      #
      # (+association+ is replaced with the symbol passed as the first argument, so
      # <tt>belongs_to :author</tt> would add among others <tt>author.nil?</tt>.)
      #
      # === Example
      #
      # A Post class declares <tt>belongs_to :author</tt>, which will add:
      # * <tt>Post#author</tt> (similar to <tt>Author.find(author_id)</tt>)
      # * <tt>Post#author=(author)</tt> (similar to <tt>post.author_id = author.id</tt>)
      # * <tt>Post#build_author</tt> (similar to <tt>post.author = Author.new</tt>)
      # * <tt>Post#create_author</tt> (similar to <tt>post.author = Author.new; post.author.save; post.author</tt>)
      # * <tt>Post#create_author!</tt> (similar to <tt>post.author = Author.new; post.author.save!; post.author</tt>)
      # The declaration can also include an options hash to specialize the behavior of the association.
      #
      # === Options
      #
      # [:class_name]
      #   Specify the class name of the association. Use it only if that name can't be inferred
      #   from the association name. So <tt>belongs_to :author</tt> will by default be linked to the Author class, but
      #   if the real class name is Person, you'll have to specify it with this option.
      # [:conditions]
      #   Specify the conditions that the associated object must meet in order to be included as a +WHERE+
      #   SQL fragment, such as <tt>authorized = 1</tt>.
      # [:select]
      #   By default, this is <tt>*</tt> as in <tt>SELECT * FROM</tt>, but can be changed
      #   if, for example, you want to do a join but not include the joined columns. Do not
      #   forget to include the primary and foreign keys, otherwise it will raise an error.
      # [:foreign_key]
      #   Specify the foreign key used for the association. By default this is guessed to be the name
      #   of the association with an "_id" suffix. So a class that defines a <tt>belongs_to :person</tt>
      #   association will use "person_id" as the default <tt>:foreign_key</tt>. Similarly,
      #   <tt>belongs_to :favorite_person, :class_name => "Person"</tt> will use a foreign key
      #   of "favorite_person_id".
      # [:foreign_type]
      #   Specify the column used to store the associated object's type, if this is a polymorphic
      #   association. By default this is guessed to be the name of the association with a "_type"
      #   suffix. So a class that defines a <tt>belongs_to :taggable, :polymorphic => true</tt>
      #   association will use "taggable_type" as the default <tt>:foreign_type</tt>.
      # [:primary_key]
      #   Specify the method that returns the primary key of associated object used for the association.
      #   By default this is id.
      # [:dependent]
      #   If set to <tt>:destroy</tt>, the associated object is destroyed when this object is. If set to
      #   <tt>:delete</tt>, the associated object is deleted *without* calling its destroy method.
      #   This option should not be specified when <tt>belongs_to</tt> is used in conjunction with
      #   a <tt>has_many</tt> relationship on another class because of the potential to leave
      #   orphaned records behind.
      # [:counter_cache]
      #   Caches the number of belonging objects on the associate class through the use of +increment_counter+
      #   and +decrement_counter+. The counter cache is incremented when an object of this
      #   class is created and decremented when it's destroyed. This requires that a column
      #   named <tt>#{table_name}_count</tt> (such as +comments_count+ for a belonging Comment class)
      #   is used on the associate class (such as a Post class). You can also specify a custom counter
      #   cache column by providing a column name instead of a +true+/+false+ value to this
      #   option (e.g., <tt>:counter_cache => :my_custom_counter</tt>.)
      #   Note: Specifying a counter cache will add it to that model's list of readonly attributes
      #   using +attr_readonly+.
      # [:include]
      #   Specify second-order associations that should be eager loaded when this object is loaded.
      # [:polymorphic]
      #   Specify this association is a polymorphic association by passing +true+.
      #   Note: If you've enabled the counter cache, then you may want to add the counter cache attribute
      #   to the +attr_readonly+ list in the associated classes (e.g. <tt>class Post; attr_readonly :comments_count; end</tt>).
      # [:readonly]
      #   If true, the associated object is readonly through the association.
      # [:validate]
      #   If +false+, don't validate the associated objects when saving the parent object. +false+ by default.
      # [:autosave]
      #   If true, always save the associated object or destroy it if marked for destruction, when
      #   saving the parent object.
      #   If false, never save or destroy the associated object.
      #   By default, only save the associated object if it's a new record.
      # [:touch]
      #   If true, the associated object will be touched (the updated_at/on attributes set to now)
      #   when this record is either saved or destroyed. If you specify a symbol, that attribute
      #   will be updated with the current time in addition to the updated_at/on attribute.
      # [:inverse_of]
      #   Specifies the name of the <tt>has_one</tt> or <tt>has_many</tt> association on the associated
      #   object that is the inverse of this <tt>belongs_to</tt> association. Does not work in
      #   combination with the <tt>:polymorphic</tt> options.
      #   See ActiveRecord::Associations::ClassMethods's overview on Bi-directional associations for more detail.
      #
      # Option examples:
      #   belongs_to :firm, :foreign_key => "client_of"
      #   belongs_to :person, :primary_key => "name", :foreign_key => "person_name"
      #   belongs_to :author, :class_name => "Person", :foreign_key => "author_id"
      #   belongs_to :valid_coupon, :class_name => "Coupon", :foreign_key => "coupon_id",
      #              :conditions => 'discounts > #{payments_count}'
      #   belongs_to :attachable, :polymorphic => true
      #   belongs_to :project, :readonly => true
      #   belongs_to :post, :counter_cache => true
      #   belongs_to :company, :touch => true
      #   belongs_to :company, :touch => :employees_last_updated_at
          </pre>
          </p>
        </ul>
      <li>
        <%= link_to 'Validations',
                    'http://guides.rubyonrails.org/active_record_validations.html',
                    target: '_blank'
        %>
        <ul>
          <li>
            <%=
                link_to 'Custom Validators',
                        'http://www.rails-dev.com/custom-validators-in-ruby-on-rails-4',
                        target: '_blank'
            %>
          </li>
        </ul>
      </li>
      <li>
        <%= link_to 'Callbacks',
                    'http://guides.rubyonrails.org/active_record_callbacks.html',
                    target: '_blank'
        %>
      </li>
      <li>
        <%= link_to 'Migrations',
                    'rails_migrations'
        %>
      </li>
      <li>Query Interface</li>
      <ul>
        <li>
          <%= link_to 'Query Interface Rails Guide',
                      'http://guides.rubyonrails.org/active_record_querying.html',
                      target: '_blank'
          %>
        </li>
        <li>
          <%= link_to 'Scopes',
                      'rails_scopes'
          %>
        </li>

      </ul>
      <li>
        <%= link_to 'Nested Attributes',
                    'http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html',
                    target: '_blank'%>
      </li>
    </ul>

    <li>Views</li>
    <ul>
      <li>Layouts</li>
      <ul>
        <li>
          <%=
              link_to 'Bootstrap 2.3.2',
                      'http://getbootstrap.com/2.3.2/index.html',
                      target: '_blank'
          %>
        </li>
        <li>
          <%=
              link_to 'Layouts and Rendering',
                      'http://guides.rubyonrails.org/layouts_and_rendering.html',
                      target: '_blank'
          %>
        </li>
      </ul>
      <li>
        <%=
            link_to 'ActionView',
                    'http://guides.rubyonrails.org/action_view_overview.html',
                    target: '_blank'
        %>
      </li>

      <li>Helpers</li>
      <ul>
        <%=
            link_to 'link_to',
                    'http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to',
                    target: '_blank'
        %>

      </ul>

    </ul>

    <li>Controllers</li>
    <ul>
      <li>
        <%=
            link_to 'ActionController',
                    'http://guides.rubyonrails.org/action_controller_overview.html',
                    target: '_blank'
        %>
      </li>

      <li>
        <%=
            link_to 'Routing',
                    'http://guides.rubyonrails.org/routing.html  ',
                    target: '_blank'
        %>
      </li>
    </ul>
    <li>Assets
    </li>
    <ul>
      <li>
        <%= link_to 'Asset Pipeline',
                    'http://guides.rubyonrails.org/asset_pipeline.html',
                    target: '_blank'%>
      </li>
      <li>
        <%= link_to 'Asset Pipeline Video',
                    'http://railscasts.com/episodes/279-understanding-the-asset-pipeline',
                    target: '_blank'%>
      </li>
    </ul>
  </ul>
  <li><%= link_to 'Rails Magic', 'rails_magic'%></li>
  <li><%= link_to 'General Guides', 'rails_guides'%></li>
  <li><%= link_to 'api.rubyonrails.org', 'http://api.rubyonrails.org/',  target: '_blank'%></li>
  <li><%= link_to 'RVM', 'rvm'%></li>
  <li><%= link_to 'Infrastructure', 'rails_infrastructure'%></li>
  <li><%= link_to 'Debugging', 'rails_debugging'%></li>
  <li><%= link_to 'Rails Database', 'rails_database'%></li>
  <li><%= link_to 'Rails Command Line', 'rails_command_line'%></li>
  <li><%= link_to 'Upload a file to server', 'http://guides.rubyonrails.org/form_helpers.html#what-gets-uploaded', target: '_blank'%></li>
  <li><%= link_to 'Migrations', 'rails_migrations'%></li>
  <li><%= link_to 'Showing a pdf file: example', 'rails_show_pdf_file_example'%></li>
  <li>
    <%=
        link_to 'Rails-Dev',
                'http://www.rails-dev.com/',
                target: '_blank'
    %>
  </li>
  <li>
    <%=
        link_to 'Security',
                'rails_security'
    %>
  </li>

</ul>

