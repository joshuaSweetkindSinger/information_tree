<% content_for :side_nav do %>

<% end %>


<h1>Managing A Software Team</h1>
<div class="rule"></div>
<li>Overview</li>
<p>
  This page contains notes about how I managed the RF Web Applications Group.
</p>
<ul>
  <li>Teams</li>
  <ul>
    <li>Scrum Teams (4)</li>
    <ul>
      <li>Maintenance of Fuel and Apollo</li>
      <li>Bug Fixing</li>
      <li>Product Refactorization</li>
      <li>Development of new products and features</li>
      <ul>
        <li>FUEL for partner cci, including handling of yen-to-dollar conversions</li>
        <li>Self-serve version with more rigorous security for client Booyah</li>
        <li>Expansion of geo-location functionality</li>
        <li>Private Ad Marketplaces</li>
      </ul>
      <li>Hackathons</li>
      <li>Agile processes</li>
      <li>Consolidation of legacy products (admin and Apollo)</li>
      <li>Tech Talks and general engineer knowledge enhancement</li>
    </ul>
    <li>UX Team</li>
    <ul>
      <li>UX Design of new features</li>
      <li>Solicit User-feedback</li>
    </ul>
    <li>QA and Automation Team</li>
    <ul>
      <li>Manual Testing on staging and beta</li>
      <li>Deployments</li>
      <li>Automated testing and other jenkins automation</li>
    </ul>
  </ul>
  <li>Individual Contribution</li>
  <ul>
    <li>Project Management and Jira Admin</li>
    <li>Bug root cause analysis</li>
    <li>Velocity and Bug-rate tracking</li>
    <li>Fostering Connective Communication with Peer Groups</li>
      <ul>
        <li>With Product: Feature life cycle, from inception to release</li>
        <li>With Product: sprint and iteration planning and tracking</li>
        <li>weekly meetings  with back-end, operations, AI and Optimization, to sync.</li>
    </ul>
    <li>Feedback on UX Design Features</li>
    <li>Expert User</li>
    <li>Product Design Refactorization</li>
    <li>Mentoring</li>
  </ul>
  <li>Software Tools</li>
  <ul>
    <li>git</li>
    <li>jenkins</li>
    <li>cucumber</li>
    <li>NewRelic</li>
    <li>RubyMine</li>
  </ul>
  <li>Meetings</li>
  <ul>
    <li>Iteration planning</li>
    <li>Sprint planning</li>
    <li>Daily scrum meeting</li>
    <li>Group Meeting twice a month</li>
    <li>PRD Review</li>
    <li>Design Review</li>
    <li>Senior Staff Meeting</li>
    <li>Weekly One on Ones with direct reports, with CTO, and with peers</li>
    <ul>
      <li>With direct reports, discuss what went well or poorly that week.
        Give praise, criticism,  and general feedback.
      </li>
      <li>
        With CTO, discuss most critical projects, and prioritize possible new work. Examples
      </li>
      <ul>
        <li>cci japanese partner, project</li>
        <li>Relative priority of transitioning to Fuel from Apollo for ops and analytics, versus new feature development work on Fuel asked for by Product.</li>
      </ul>
      <li>With peers, discuss syncing issues for joint development.</li>
    </ul>
  </ul>
  <li>Bugs</li>
  <ul>
    <li>Process for reporting bugs</li>
    <li>root cause analysis for bugs</li>
    <li>blocker bug handling</li>
    <ul>
      <li>Person who encounters the blocker reports it to Tara, as described by group wiki page.</li>
      <li>Tara verifies, fleshes out bug report, which appears on jira list of blockers, and passes to Anna</li>
      <li>Anna assigns an engineer to fix, with status posted daily.</li>
    </ul>
    <li>Non-blocker bug handling</li>
    <ul>
      <li>Non blocker bugs are scheduled into upcoming sprints.</li>
      <li>The bug rate and outstanding bug story points are tracked.</li>
      <li>We like to keep outstanding bugs at around 50 story points, or 25 person days
        of effort, which, for a group of 20 developers is a couple of days worth of full time work.
      <li>If the outstanding bugs get too large, we have a bug sprint to beat them down.</li>
    </ul>
    <li>Bug Testing</li>
    <ul>
      <li>test complicated permissions scenarios</li>
      <li>be robust against bad user data</li>
      <li>test for degenerate cases</li>
      <li>test for direct url access, not through UI</li>
      <li>QA: automated and manual</li>
    </ul>
  </ul>
  <li>Peer Group Interactions</li>
  <ul>
    <li>Interact with Ops and Analytics</li>
    <li>Interact with Product and Sales</li>
    <li>Interact with Back-end Engineering</li>
    <li>Interact with Recruiting</li>
    <ul>
      <li>Job ads</li>
      <li>Online coding exam and code iterations</li>
      <li>Onsite interviews</li>
      <li>Hiring of contractors, interns, and full-timers</li>
    </ul>
    <li>Interact with Human Resources</li>
  </ul>
  <li>Deployment</li>
  <ul>
    <li>staging</li>
    <li>beta</li>
    <li>production</li>
    <li>client-production</li>
  </ul>
  <p>
      When software is first checked in, a suite of automated tests runs and must pass before it can actually be checked in to master.
      When checked into master, it automatically gets deployed to staging. If beta is unlocked, then this gets deployed to beta as well.
      If beta is locked, then this means that beta-testing is going on. This typically happens Monday through Wednesday inclusive.
      If the beta version passes beta, then on Thursday morning it gets deployed to production and beta is then unlocked to receive
      successive versions of staging.
  </p>
  <p>
      So, assuming a successful deployment to production, once that happens Thursday morning, then it gets unlocked and, as each
      developer checks in good code, that code is simultaneously deployed to staging and beta, which means that beta testers get
      the raw untested code to bang on.
  </p>
  <li>Weaknesses In My Management</li>
  <ul>
    <li>I like to experiment a lot. Sometimes that comes across as indecisiveness if the experiment
      <em>du jour</em> is seen as flip-flopping or wishy-washiness.
    </li>
    <li>People reach a point of "it's good enough, let's move on" faster than I do.
        I often find myself wanting to improve something a bit more before leaving it, which
        can leave people with the feeling that I haven't appreciated the work they've done.
        (On the flip side, I'm very generous with compliments, but I need to cut back
    on the criticism sometimes.)
    </li>
    <li>I sometimes launch in to a problem situation by telling the other person what
        I think the problem is and what needs to happen. That's almost always a mistake.
        Better first to listen to their side of things and sympathize with the problem as they
        are experiencing it.
    </li>
  </ul>
  <li>Strengths in my management</li>
  <ul>
    <li>I treat people openly, with integrity. I'm a straight shooter and I don't play games.</li>
    <li>People know that I listen to them, care about their success, and will fight for them.</li>
    <li>People know that I take seriously my role to nurture their careers.</li>
    <li>I have excellent organizational skills.</li>
  </ul>
  <li>Chronic Problems</li>
  <ul>
    <li>Product would never prioritize work for Ops and Analytics, leading to increases in mistakes that impacted campaign performance, and ultimately led to client flight.</li>
    <li>Back-end teams continued developing infrastructure, even making breaking changes, without consulting UI group on how to accommodate UI concerns</li>
    <li>Product forebade salespeople from talking with engineering, breaking some needed communication lines</li>
    <li>Product would never give engineering heads up on promises being made to clients for software functionality and delivery dates,
        always causing a giant rush once dates were announced.</li>
    <li>CTO and VP Engineering had toxic relationship</li>
    <li>Product people gave short-shrift to agile process, failing to show up for daily standups,
      substantially changing stories mid-sprint, or under-specifying the work to be done.</li>
    <li>Developers did not do sufficient testing of their own work prior to check-in.</li>
    <li>Product begrudged time spent on tech debt, leading to fragile code and an increase in bugs and development times.</li>
  </ul>
  <li>Overriding Goal</li>
  <p>
    The overriding goal of a software development team is to deliver quality software on time. The job of a team manager
    is to configure the team so that it can do so optimally. There are some things that directly impact this goal, and still others
    that support it.
  </p>
  <ul>
    <li>Mission: what are we building, for whom, and why?</li>
    <ul>
      <li>Allow ops people to create and configure campaigns</li>
      <li>Allow analytics people to analyze, monitor, and re-configure campaigns</li>
      <li>Allow clients to do all of the above in a self-serve ui</li>
    </ul>
    <li>Quality Software</li>
      <ul>
        <li>Tech Talks On Craft</li>
        <li>Automated Tests</li>
        <li>Test Driven Development</li>
        <li>Pairing Programmers</li>
        <li>Manual QA by developers and QA people</li>
        <li>Time for paying down tech-debt</li>
        <li>Design reconfiguration</li>
        <li>Snappy UI</li>
        <li>Happy Developers</li>
        <ul>
          <li>Developer ownership</li>
          <li>Hackathons</li>
          <li>One on Ones</li>
        </ul>
      </ul>
    <li>Delivered On Time</li>
    <ul>
      <li>Hiring</li>
      <p>I grew the team from 6 to 36 in two years.</p>
      <ul>
        <li>Laser maze code exam and iterations</li>
      </ul>
      <li>Agile development process</li>
      <li>Bug-rate and velocity tracking</li>
    </ul>
  </ul>
  <li>Things That Went Well</li>
  <ul>
    <li>Biggest contribution: organization within the group, creation of process touch-points between peer groups,
      creation of shared data that could be used to communicate and monitor progress, resulting in
      streamlined operations so that the trains could run on time.</li>
    <ul>
      <li>Deployment process</li>
      <li>Bug-reporting, bug-handling</li>
      <li>Deployment and QA</li>
      <li>Velocity and bug-rate calculation</li>
      <li>Feature process flow, from inception to release</li>
      <ul>
        <li>PRD Review, which also assigns story points</li>
        <li>Design Review</li>
        <li>Sprint Planning, which breaks down into tasks and assigns story points to each task</li>
        <li>Sprint Starts</li>
        <li>PM Reviews feature in staging</li>
      </ul>
      <li>Use of JIRA scrumboards for sprint- and iteration-planning, and to communicate status and estimate completion dates</li>
    </ul>
    <li>cci project required serious estimation and prioritization to deliver</li>
    <li>Implementation of Agile</li>
    <li>Promoting people into areas where their native abilities could shine</li>
    <ul>
      <li>Randy liked core infrastructure, paying down techdebt, refactoring, mentoring. Placed him in a position to lead a "craft guild" promoting best practices.
        But he was too picky on code reviews and it impacted velocity, so allowed him to select others who were
        good but not as bothered by code flaws.
      </li>
      <li>Rick was a great mentor, good a people management, and strong with coding skills. Made him senior manager.</li>
      <li>Anna was also good with people and great at Emergency-Room operations. She was always best to handle an on-the-spot situation. Made her a manager.</li>
    </ul>
    <li>JIRA scrumboards for communicating and managing iteration status</li>
    <li>Weekly one on ones with reports and peers</li>
    <li>Bug root cause analysis.</li>
    <li>Growing the team, laser maze. I became quite adept at knowing all the good configurations for this solution and how to guide people toward improving their solutions.</li>
  </ul>
  <li>Contributions that might have been made but were not</li>
  <ul>
    <li>Significant redesigns of Fuel</li>
    <ul>
      <li>Navigation</li>
      <li>Bird's-eye view</li>
      <li>DRY-ness of UI from a user-standpoint. One clear way to do things,
        not multiple, custom-built ways depending on entry-point into the UI
      <li>Reduction of nested modal pop-ups and giant wizards. Allow incremental building of objects and their relationships.</li>
    </ul>
  </ul>
</ul>